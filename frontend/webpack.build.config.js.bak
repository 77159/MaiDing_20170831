/**
 * Copyright 2014-2017, FengMap, Ltd.
 * All rights reserved.
 *
 * @authors  zxg (zhangxiaoguang@fengmap.com)
 * @date     2017/8/1
 * @describe  Webpack 生产环境-配置文件
 */
'use strict';
const webpack = require("webpack");
const path = require("path");
const fs = require('fs');
const nodeModulesPath = path.resolve(__dirname, "node_modules");
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ExtractTextPlugin = require("extract-text-webpack-plugin");
const CopyWebpackPlugin = require('copy-webpack-plugin');
//const CompressionPlugin = require("compression-webpack-plugin");
//const TransferWebpackPlugin = require('transfer-webpack-plugin');
//const CircularDependencyPlugin = require('circular-dependency-plugin');

//antd 自定义样式
const lessToJs = require('less-vars-to-js');
const themeVariables = lessToJs(fs.readFileSync(path.join(__dirname, './antd-theme-vars.less'), 'utf8'));

//是否为生产环境
var isProduction = process.env.NODE_ENV === "production";
console.log("=================="+isProduction);
const config = {
    // 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个chunk（编译后的独立文件）。
    entry: [
        path.join(process.cwd(), '/src/js/app.js'),         //设置入口文件的相对路径
    ],
    devtool: "source-map",  //source map 设置  详细配置：https://doc.webpack-china.org/configuration/devtool/
    //devtool:false,
    // 生成文件，是模块构建的终点，包括输出文件与输出路径。
    output: {
        //数据文件名称
        filename: 'js/[name].[chunkhash:8].js',
        chunkFilename: 'js/[name].[chunkhash:8].chunk.js',
        path: path.resolve(process.cwd(), 'build'),     //输出文件的路径（绝对路径），build目录下（开发模式下，这个没什么用，所有文件都是在内存中）
        publicPath: '/',                                //虚拟目录
    },
    module: {
        noParse: /fengmap/,                     //排除对FengMapSDK的编译
        rules: [{
            test: /\.(js|jsx)$/,                //匹配.js||.jsx后缀名的文件
            use: [{
                loader: 'babel-loader',         //使用babel-loader转换器
                // options: {
                //     presets: [
                //         ['es2015', {modules: false, loose: true}],     //其中的modules: false配置项是告诉es2015 preset避免把import statements编译成CommonJS，这样Webpack才好做tree shaking。
                //         ['stage-1'],
                //         ['react']
                //     ],
                //     plugins: [
                //         ['transform-runtime']
                //     ],
                //     comments: false,
                //     cacheDirectory: true
                // }
            }],
            exclude: [nodeModulesPath],             //不解析node_modules目录的es6语法
        }, {
            test: /\.css$/,                         //匹配.css后缀名的文件
            use: ExtractTextPlugin.extract({        //判断是否为生产环境，生产环境时抽取所有.css文件打包，非生产环境使用默认的转换器进行编译。
                fallback: "style-loader",
                use: [
                    {
                        loader: "css-loader",
                        options: {
                            modules: true,
                            importLoaders: 1,
                            localIdentName: '[local]--[hash:base64:5]'
                        }
                    }
                ]
            })
        }, {
            test: /\.less$/,                        //匹配.less后缀名的文件
            exclude: [nodeModulesPath],             //排除 node_modules目录中的less （不处理 antd 的less）
            use: ExtractTextPlugin.extract({        //生产环境时抽取所有.less文件打包。
                fallback: "style-loader",
                use: [
                    {
                        loader: "css-loader",
                        options: {
                            modules: true,
                            sourceMap: false,
                            importLoaders: 1,
                            localIdentName: '[local]--[hash:base64:5]'
                        }
                    },
                    {
                        loader: "less-loader",
                        options: {
                            sourceMap: true,
                            modifyVars: themeVariables
                        }
                    }
                ]
            })
        }, {
            test: /\.less$/,                        //匹配.less后缀名的文件
            include: [nodeModulesPath],             //仅处理 node_modules目录中的less （antd的less文件）
            use: ExtractTextPlugin.extract({        //生产环境时抽取所有.less文件打包。
                fallback: "style-loader",
                use: [
                    {
                        loader: "css-loader"
                    },
                    {
                        loader: "less-loader",
                        options: {
                            sourceMap: false,
                            modifyVars: themeVariables
                        }
                    }
                ]
            })
        },

            //     {
            //     test: /\.(eot|svg|ttf|woff|woff2)$/,        //字体处理
            //     loader: 'file-loader'
            // }, {
            //     test: /\.(jpg|png|gif)$/,
            //     loaders: [
            //         'file-loader',
            //         // {
            //         //     loader: 'image-webpack-loader',      //图片压缩，未配置，建议使用TinyPng手工压缩
            //         //     query: {
            //         //         progressive: true,
            //         //         optimizationLevel: 7,
            //         //         interlaced: false,
            //         //         pngquant: {
            //         //             quality: '65-90',
            //         //             speed: 4,
            //         //         },
            //         //     },
            //         // },
            //     ]
            // },
            //     {
            //     test: /\.html$/,
            //     loader: 'file-loader'
            // },
            // {
            //     test: /\.json$/,
            //     loader: 'json-loader'
            // }, {
            //     test: /\.(mp4|webm)$/,
            //     loader: 'url-loader',      //url-loader 功能类似于 file-loader，但是在文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL，作为内联文件使用。
            //     query: {
            //         limit: 10000,          // 内联文件的大小，单位：Byte
            //         mimetype: 'image/png'  // 设置内联文件的mime
            //     }
            // }
        ]
    },
    plugins: [

        // 使用 Scope Hositing 特性（范围提升） 减少闭包模块  webpack3 新特性
        new webpack.optimize.ModuleConcatenationPlugin(),

        //打包样式文件
        new ExtractTextPlugin({
            filename: 'css/[name].[contenthash].css',
            allChunks: true,
            disable: false
        }),

        // 将chunk中的公共模块抽取，单独生成一个chunk，用于加速
        // 在HtmlWebpackPlugin中需加入 chunksSortMode: 'dependency'
        new webpack.optimize.CommonsChunkPlugin({
            name: "vendor",
            children: true,
            async: true,
            minChunks: ({resource}) =>
                resource &&
                resource.indexOf("node_modules") >= 0 &&
                resource.match(/\.(js|less|scss)$/)
        }),

        //动态生成 index.html 并缩小、优化
        //详细配置：https://github.com/jantimon/html-webpack-plugin#third-party-addons
        new HtmlWebpackPlugin({
            template: path.join(__dirname, 'src/index.html'),           //模板文件地址
            filename: 'index.html',                                     //生成文件名称
            chunksSortMode: 'dependency',           //必须通过CommonsChunkPlugin来持续使用多个块，保证引用的顺序
            inject: 'body',                         //把模板注入到哪个标签后 'body'
            minify: {                               //详细配置https://github.com/kangax/html-minifier#options-quick-reference
                collapseWhitespace: true,           //折叠DOM中的文本节点的空白空间
                collapseInlineTagWhitespace: true,  //折叠时不要在元素之间留下任何空格。 必须结合使用collapseWhitespace=true
                removeEmptyAttributes: true,        //删除属性值为空的属性
                removeComments: true,               //删除注释
                keepClosingSlash: true,             //在单体元素上保持斜线
                minifyJS: true,                     //精简js  https://github.com/mishoo/UglifyJS2
                minifyCSS: true,                    //精简css https://github.com/jakubpawlowicz/clean-css
                minifyURLs: true,                   //精简url https://github.com/stevenvachon/relateurl
            }
        }),

        //将文件压缩为Gzip文件
        // new CompressionPlugin({
        //     asset: "[path].gz[query]",
        //     algorithm: "gzip",
        //     test: /\.js$|\.css$|\.html$|\.eot?.+$|\.ttf?.+$|\.woff?.+$|\.svg?.+$/,
        //     threshold: 10240,              //只有大小大于该值的资源会被处理。单位是 bytes。默认值是 0，此处设置为 10kb
        //     minRatio: 0.8
        // }),

        // 移动一些未通过webpack引用的静态文件
        new CopyWebpackPlugin([
            {from: 'src/img', to: 'img'},
            {from: 'src/assets', to: 'assets'}
        ]),
    ],
    resolve: {
        modules: [path.join(__dirname, 'src'), 'node_modules']
    },
    target: 'web',                          // 构建目标：编译为类浏览器环境里可用（默认）
    //performance: {
    //过滤指定文件，不进行性能计算提示
    //assetFilter: (assetFilename) => !(/(\.map$)|(^(main\.|favicon\.))/.test(assetFilename)),
    //}
};
module.exports = config;
